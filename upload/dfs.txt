#include <iostream>
#include <vector>

using namespace std;
int n;
vector<pair<int,int>> v;
int maxN = 0;
void DFS(int, int);

int main(int argc, char* argv[]) {
	cout << "Hello, goorm!" << endl;
	
	cin >> n;
	v.push_back(make_pair(-1,-1));
	
	for(int i = 0; i < n; i++){
		int key;
		int val;
		cin >> key;
		cin >> val;
		v.push_back(make_pair(key , val));
	}
	// for(int i = 0; i < n ; i++){
	// 	cout << v[i].first << " " << v[i].second << "";
	// }v
	DFS(1,0);
	cout << maxN;
	return 0;
}

void DFS(int curN, int sum){
	if(curN > n ){
		if(maxN < sum){
			maxN = sum;
		}
		return;
	}
	else if(curN + v[curN].first > n + 1 ){
		if(maxN < sum){
			maxN = sum;
		}
		return;
	}
	DFS(curN + v[curN].first , sum + v[curN].second);
	DFS(curN + 1, sum);
	return;
}